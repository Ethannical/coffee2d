// Generated by CoffeeScript 1.4.0
(function() {
  var Pong, init,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  $(document).ready(function() {
    return init();
  });

  init = function() {
    var canvas, pong, scene;
    canvas = $('#canvas')[0];
    scene = new Scene(canvas, '#222222');
    pong = new Pong(scene.size.w, scene.size.h);
    return scene.addChild(pong);
  };

  Pong = (function(_super) {

    __extends(Pong, _super);

    function Pong(width, height) {
      var _this = this;
      this.width = width;
      this.height = height;
      Pong.__super__.constructor.call(this);
      this.playerPaddle = new Rect(5, 40, 20, 120, '#66AAAA');
      this.compPaddle = new Rect(this.width - 25, 100, 20, 120, 'AA66AA');
      this.ball = new Rect(this.width / 2, this.height / 2, 15, 15, 'AABBAA');
      this.addChild(this.playerPaddle);
      this.addChild(this.compPaddle);
      this.addChild(this.ball);
      this.vx = this.vy = 0.2;
      this.accleration = 0.00005;
      this.playerScore = this.compScore = 0;
      this.onKeyDown(38, function() {
        return _this.playerPaddle.position.y -= 10;
      });
      this.onKeyDown(40, function() {
        return _this.playerPaddle.position.y += 10;
      });
    }

    Pong.prototype.update = function(dt) {
      var diff, dx, dy;
      if (this.vx > 0) {
        this.vx += this.accleration;
      } else {
        this.vx -= this.accleration;
      }
      if (this.vy > 0) {
        this.vy += this.accleration;
      } else {
        this.vy -= this.accleration;
      }
      if (this.vx > 0.5) {
        this.vx = 0.5;
      } else if (this.vx < -0.5) {
        this.vx = -0.5;
      }
      if (this.vy > 0.5) {
        this.vy = 0.5;
      } else if (this.vy < -0.5) {
        this.vy = -0.5;
      }
      diff = this.ball.position.y + this.ball.size.h / 2.0 - (this.compPaddle.position.y + this.compPaddle.size.h / 2.0);
      if (diff > 5) {
        this.compPaddle.position.y += 8;
      } else if (diff < -5) {
        this.compPaddle.position.y -= 8;
      }
      dx = this.vx * dt;
      dy = this.vy * dt;
      if ((this.ball.position.y + dy) < 0) {
        dy *= -1;
        this.vy *= -1;
      } else if ((this.ball.position.y + this.ball.size.h + dy) > this.height) {
        dy *= -1;
        this.vy *= -1;
      }
      if (this.playerPaddle.isPointInside(this.ball.position.x + dx, this.ball.position.y)) {
        dx *= -1;
        this.vx *= -1;
      } else if (this.playerPaddle.isPointInside(this.ball.position.x + dx, this.ball.position.y + this.ball.size.h)) {
        dx *= -1;
        this.vx *= -1;
      } else if (this.compPaddle.isPointInside(this.ball.position.x + this.ball.size.w + dx, this.ball.position.y)) {
        dx *= -1;
        this.vx *= -1;
      } else if (this.compPaddle.isPointInside(this.ball.position.x + this.ball.size.w + dx, this.ball.position.y + this.ball.size.h)) {
        dx *= -1;
        this.vx *= -1;
      }
      if ((this.ball.position.x + dx) < -this.ball.size.w) {
        this.ball.setPosition(this.width / 2, this.height / 2);
        this.compScore += 1;
      } else if ((this.ball.position.x + this.ball.size.w + dx) > this.width + this.ball.size.w) {
        this.ball.setPosition(this.width / 2, this.height / 2);
        this.playerScore += 1;
      }
      this.ball.position.x += dx;
      this.ball.position.y += dy;
      return Pong.__super__.update.call(this, dt);
    };

    Pong.prototype.draw = function(ctx) {
      ctx.save();
      ctx.fillStyle = 'orange';
      ctx.font = '48px monospace';
      ctx.fillText("" + this.playerScore, this.width / 2 - 80, 50);
      ctx.fillText("" + this.compScore, this.width / 2 + 50, 50);
      ctx.lineWidth = 3;
      ctx.setLineDash([15, 7]);
      ctx.strokeStyle = 'orange';
      ctx.beginPath();
      ctx.moveTo(this.width / 2, 0);
      ctx.lineTo(this.width / 2, this.height);
      ctx.stroke();
      ctx.restore();
      return Pong.__super__.draw.call(this, ctx);
    };

    return Pong;

  })(Component);

}).call(this);
