// Generated by CoffeeScript 1.4.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.Point2 = (function() {

    function Point2(x, y) {
      this.x = x;
      this.y = y;
    }

    Point2.prototype.plus = function(v) {
      this.x += v.x;
      this.y += v.y;
      return this;
    };

    return Point2;

  })();

  window.Vector2 = (function() {

    function Vector2(x, y) {
      this.x = x;
      this.y = y;
    }

    Vector2.prototype.plus = function(v) {
      this.x += v.x;
      this.y += v.y;
      return this;
    };

    Vector2.prototype.dot = function(v) {
      return this.x * v.x + this.y * v.y;
    };

    return Vector2;

  })();

  window.Rect = (function(_super) {

    __extends(Rect, _super);

    function Rect(x, y, w, h, color) {
      this.color = color != null ? color : 'black';
      Rect.__super__.constructor.call(this, x, y, w, h);
    }

    Rect.prototype.isPointInside = function(x, y) {
      return x >= this.position.x && x <= this.position.x + this.size.w && y >= this.position.y && y <= this.position.y + this.size.h;
    };

    Rect.prototype.draw = function(ctx) {
      ctx.fillStyle = this.color;
      ctx.beginPath();
      ctx.rect(this.position.x, this.position.y, this.size.w, this.size.h);
      ctx.closePath();
      ctx.fill();
      return Rect.__super__.draw.call(this, ctx);
    };

    return Rect;

  })(Component);

  window.Polygon = (function(_super) {

    __extends(Polygon, _super);

    function Polygon(points) {
      var i, _i, _ref;
      this.points = points;
      Polygon.__super__.constructor.call(this, 0, 0, 100, 100);
      this.lineSegs = [];
      for (i = _i = 0, _ref = this.points.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        this.lineSegs.push([this.points[i], this.points[(i + 1) % this.points.length]]);
      }
    }

    Polygon.prototype.containsPoint = function(x, y) {
      var a, b, count, ix, seg, _i, _len, _ref;
      count = 0;
      _ref = this.lineSegs;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        seg = _ref[_i];
        a = seg[0];
        b = seg[1];
        if (b[1] !== a[1]) {
          ix = (b[0] - a[0]) * (y - a[1]) / (b[1] - a[1]) + a[0];
          if (ix >= x && (this.inRange(ix, a[0], b[0])) && (this.inRange(y, a[1], b[1]))) {
            count += 1;
          }
        }
      }
      if (count % 2 === 0) {
        return false;
      }
      return true;
    };

    Polygon.prototype.inRange = function(x, a, b) {
      if (x < a && x < b) {
        return false;
      }
      if (x > a && x > b) {
        return false;
      }
      return true;
    };

    Polygon.prototype.draw = function(ctx) {
      var i, p, _i, _ref;
      ctx.save();
      ctx.translate(this.position.x, this.position.y);
      ctx.fillStyle = 'rgba(50,20,240,0.4)';
      ctx.beginPath();
      p = this.points[0];
      ctx.moveTo(p[0], p[1]);
      for (i = _i = 1, _ref = this.points.length - 1; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
        p = this.points[i];
        ctx.lineTo(p[0], p[1]);
      }
      ctx.closePath();
      ctx.fill();
      ctx.restore();
      return Polygon.__super__.draw.call(this, ctx);
    };

    return Polygon;

  })(Component);

}).call(this);
