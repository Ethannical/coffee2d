// Generated by CoffeeScript 1.4.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.IsometricMap = (function(_super) {

    __extends(IsometricMap, _super);

    function IsometricMap(opts) {
      IsometricMap.__super__.constructor.call(this);
      this.opts = opts;
      this.spriteSheet = opts.spriteSheet;
      this.map = opts.map;
      this.tileWidth = opts.tileWidth;
      this.tileHeight = opts.tileHeight;
      this.tileXOffset = opts.tileXOffset;
      this.tileYOffset = opts.tileYOffset;
      this.tileBoundingPoly = opts.tileBoundingPoly;
      this.mapOffset = 0;
      this.tiles = [];
      this.init();
      this.addListener('tileMouseOver', (function(evt) {
        var row, tile, _i, _len, _ref, _results;
        _ref = this.map;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          row = _ref[_i];
          _results.push((function() {
            var _j, _len1, _results1;
            _results1 = [];
            for (_j = 0, _len1 = row.length; _j < _len1; _j++) {
              tile = row[_j];
              tile.hidePoly();
              if (tile === evt.origin) {
                _results1.push(tile.showPoly());
              } else {
                _results1.push(void 0);
              }
            }
            return _results1;
          })());
        }
        return _results;
      }).bind(this));
    }

    IsometricMap.prototype.init = function() {
      var cols, i, ii, j, jj, maxX, maxY, minX, row, rows, t, x, xOffset, y, yOffset, _i, _j, _len, _len1, _ref;
      minX = maxX = 0;
      maxY = 0;
      i = 0;
      j = 0;
      ii = 0;
      jj = 0;
      xOffset = 0;
      yOffset = 0;
      rows = this.map.length;
      cols = this.map[0].length;
      while (i < rows && j < cols) {
        ii = i;
        jj = j;
        x = xOffset;
        y = yOffset;
        console.log('-----');
        while (ii < rows && jj < cols) {
          if (ii < 0 || ii >= rows || jj < 0 || jj >= cols) {
            break;
          }
          t = this.map[ii][jj];
          t.position = {
            x: x,
            y: y
          };
          t.setBoundingPolygon(this.tileBoundingPoly);
          this.addChild(t);
          if (x < minX) {
            minX = x;
          }
          if (x > maxX) {
            maxX = x;
          }
          if (y > maxY) {
            maxY = y;
          }
          ii -= 1;
          jj += 1;
          x += this.tileWidth;
        }
        if (i + 1 < cols) {
          i++;
          xOffset -= this.tileXOffset;
        } else {
          j++;
          xOffset += this.tileXOffset;
        }
        yOffset += this.tileYOffset;
      }
      _ref = this.map;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        row = _ref[_i];
        for (_j = 0, _len1 = row.length; _j < _len1; _j++) {
          t = row[_j];
          t.position.x += -minX;
        }
      }
      this.mapOffset = -minX;
      return this.setSize(maxX - minX, maxY);
    };

    IsometricMap.prototype.addObject = function(obj, i, j) {
      var x, y;
      x = i * -this.tileXOffset + j * this.tileXOffset + this.mapOffset;
      y = i * this.tileYOffset + j * this.tileYOffset;
      obj.setPosition(x, y);
      return this.addChild(obj);
    };

    return IsometricMap;

  })(Component);

}).call(this);
